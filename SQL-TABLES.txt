-- Run these commands in Supabase SQL Editor

-- 1. Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 2. Create agent_configurations table
CREATE TABLE IF NOT EXISTS agent_configurations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    system_prompt TEXT NOT NULL,
    initial_greeting TEXT NOT NULL,
    retell_agent_id VARCHAR(255),
    retell_llm_id VARCHAR(255),
    voice_id VARCHAR(100) DEFAULT '11labs-Adrian',
    language VARCHAR(10) DEFAULT 'en-US',
    enable_backchannel BOOLEAN DEFAULT TRUE,
    backchannel_words TEXT[] DEFAULT ARRAY['mm-hmm', 'I see', 'got it'],
    interruption_sensitivity DECIMAL(3,2) DEFAULT 0.7,
    response_delay_ms INTEGER DEFAULT 800,
    max_call_duration_seconds INTEGER DEFAULT 600,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. Create calls table
CREATE TABLE IF NOT EXISTS calls (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    agent_configuration_id UUID NOT NULL REFERENCES agent_configurations(id) ON DELETE CASCADE,
    retell_call_id VARCHAR(255) UNIQUE,
    call_type VARCHAR(20) NOT NULL CHECK (call_type IN ('phone', 'web')),
    status VARCHAR(50) NOT NULL CHECK (status IN ('initiated', 'in_progress', 'completed', 'failed', 'ended')),
    driver_name VARCHAR(255),
    phone_number VARCHAR(50),
    load_number VARCHAR(100),
    start_time TIMESTAMPTZ,
    end_time TIMESTAMPTZ,
    duration_seconds INTEGER,
    transcript TEXT,
    analysis_results JSONB,
    metadata JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 4. Enable Row Level Security (RLS)
ALTER TABLE agent_configurations ENABLE ROW LEVEL SECURITY;
ALTER TABLE calls ENABLE ROW LEVEL SECURITY;

-- 5. Create RLS Policies for agent_configurations
CREATE POLICY "Users can view their own agents" ON agent_configurations
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own agents" ON agent_configurations
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own agents" ON agent_configurations
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own agents" ON agent_configurations
    FOR DELETE USING (auth.uid() = user_id);

-- 6. Create RLS Policies for calls
CREATE POLICY "Users can view their own calls" ON calls
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own calls" ON calls
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own calls" ON calls
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own calls" ON calls
    FOR DELETE USING (auth.uid() = user_id);

-- 7. Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_agent_configurations_user_id ON agent_configurations(user_id);
CREATE INDEX IF NOT EXISTS idx_agent_configurations_is_active ON agent_configurations(is_active);
CREATE INDEX IF NOT EXISTS idx_calls_user_id ON calls(user_id);
CREATE INDEX IF NOT EXISTS idx_calls_retell_call_id ON calls(retell_call_id);
CREATE INDEX IF NOT EXISTS idx_calls_agent_configuration_id ON calls(agent_configuration_id);

-- 8. Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 9. Create triggers for updated_at
CREATE TRIGGER update_agent_configurations_updated_at BEFORE UPDATE
    ON agent_configurations FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_calls_updated_at BEFORE UPDATE
    ON calls FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- âœ… Done! Your database is ready.
